#!/usr/bin/python3

# -*- coding: utf-8 -*-

# Copyright (c) 2018 Jared Daniel Carbonell Recomendable. All rights reserved.

from datetime import datetime
import os
import sys

def dir_exists(string):
    dirs = sorted(os.listdir())
    for dir in dirs:
        if string in dir:
            return True
    return False

def is_leap(year):
    '''Return True if leap year, else False.'''
    year = int(year)
    if year % 4 != 0:
        return False
    else:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True

def make_template(variant=0):
    '''Return a date string in the form of "YYMMDD_".'''
    datetime_now = datetime.now()
    yy = str(datetime_now.year)
    mm = str(datetime_now.month)
    if variant == 0:
        dd = str(datetime_now.day)
    elif variant == 1:
        dd = str(datetime_now.day-1)
        if dd == '0':
            if int(mm) in (1,2,4,6,8,9,11):
                dd = '31'
                mm = str(int(mm) - 1)
            elif int(mm) in (5,7,10,12):
                dd = '30'
                mm = str(int(mm) - 1)
            elif is_leap(yy):
                dd = '29'
                mm = '02'
            else:
                dd = '28'
                mm = '02'
    elif variant == 2:
        dd = str(datetime_now.day+1)
        if dd == '32':
            dd = '01'
            mm = str(int(mm) + 1)
        if dd == '31' and (int(mm) in (4,6,9,11)):
            dd = '01'
            mm = str(int(mm) + 1)
        if mm == '2' and not(is_leap(yy)) and (int(dd) in range(29,33)):
            dd = '01'
            mm = '03'
        if mm == '2' and is_leap(yy) and (int(dd) in range(30,33)):
            dd = '01'
            mm = '03'
    if mm == '0':
        mm = '12'
        yy = str(int(yy) - 1)
    if mm == '13':
        mm = '01'
        yy = str(int(yy) + 1)
    if len(mm) == 1:
        mm = '0' + mm
    if len(dd) == 1:
        dd = '0' + dd
    return yy+mm+dd+'_'

def new_name(variant=0):
    '''Return the proposed name of the directory in the form of "YYMMDD_NN", where NN refers to the serial number of the directory.'''
    template = make_template(variant)
    for i in range(1,10):
        if not(dir_exists(template+'0'+str(i))):
            return template+'0'+str(i)
    for i in range(10,100):
        if not(dir_exists(template+'0'+str(i))):
            return template+str(i)
    return template+'99'

def make_folder(variant=0):
    '''Make the directory in the current working directory. This is the function that does the intended process of the program.'''
    try:
        name = new_name(variant)
        os.mkdir(name)
        return 0, name
    except FileExistsError:
        return 1, 'Maximum number of directories for the day reached. You worked too hard. Go home, in the park.'

def run(variant=0):
    '''Carry out the process of making a directory in the current working directory. This is the first function called when the program is run in the terminal.'''
    n = make_folder(variant)
    if n[0] == 0:
        print('Directory with the name {} successfully created.'.format(n[1]))
    else:
        print(n[1])

def show_help():
    '''Show the help documentation for the program.'''
    help_doc = '''Usage: mkdird [options]

Options:
  -h, --help          show this help message and exit
  -p, --previous-day  same as calling the function, but the date is set to the previous day
  -n, --next-day      same as calling the function, but the date is set to the next day'''
    print(help_doc)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        run()
    elif len(sys.argv) == 2:
        if sys.argv[1] in ('-p', '--previous-day'):
            run(1)
        elif sys.argv[1] in ('-n', '--next-day'):
            run(2)
        else:
            show_help()
    else:
        show_help()
