#!/usr/bin/python3

# -*- coding: utf-8 -*-

# Copyright (c) 2018 Jared Daniel Carbonell Recomendable. All rights reserved.

import sys
import subprocess

# Need to change these when porting this program for other sinks or computers.
sink = 3

# Default Commands and Error Messages
errormsg = '\nUnable to get volume.\nExiting...\n'
invalid_resp = '\nYou have entered an invalid response.\nExiting...\n'
com = 'pactl set-sink-mute {s} 0 && pactl set-sink-volume {s} {p}%'
comget = 'pactl list sinks | grep Volume'

def run(has_input, level=0):
    """Carry out the process of changing the volume of the system."""
    if has_input == 1:
        to_run = com.format(s=sink, p=level)
        print(level)
        subprocess.run(['bash', '-c', to_run])
    elif has_input == 2:
        volume = str(
            subprocess.check_output(comget, shell=True)
        ).split('/ ')[1]
        volume = volume.split('%')[0]
        volume = volume.split(' ')[-1]
        if volume.isnumeric():
            volume = int(volume)
            if level == 'u':
                volume = min(100, volume + 1)
            else:
                volume = max(0, volume - 1)
            run(1, volume)
        else:
            sys.exit(errormsg)
    else:
        temp_level = input('Volume [0-100, Default: 0]: ')
        if temp_level == '':
            run(1)
        elif temp_level.isnumeric():
            if 0 <= int(temp_level) < 101:
                run(1, temp_level)
            else:
                sys.exit(invalid_resp)
        else:
            sys.exit(invalid_resp)

def show_help():
    """Show the help documentation for the program."""
    help_doc = '''Usage: volume [percentage-level]

Level:
  0   - lowest
  100 - highest'''
    print(help_doc)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        run(False)
    elif len(sys.argv) == 2:
        if sys.argv[1].isnumeric():
            vol = int(sys.argv[1])
            if 0 <= vol < 101:
                run(1, vol)
            else:
                show_help()
        elif sys.argv[1] in ('d', 'u', 'down', 'up'):
            run(2, sys.argv[1][0])
        else:
            show_help()
    else:
        show_help()
